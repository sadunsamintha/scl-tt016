<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	  http://www.springframework.org/schema/util
	   http://www.springframework.org/schema/util/spring-util-3.0.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<context:annotation-config />
	<aop:aspectj-autoproxy />

	<util:map id="mapRemoteServerController">
		<entry key="standard" value-ref="stdRemoteServer" />
		<entry key="simulator" value-ref="remoteServerSimulator" />
	</util:map>

	<bean id="stdRemoteServer" class="${stdRemoteServer}" init-method="init">
		<constructor-arg ref="stdRemoteModel" />
		<property name="productStatusMapping" ref="remoteServerProductStatusMapping" />
		<property name="sicpadataPassword" value="${sicpadataPassword}" />
		<property name="cryptoFieldsConfig" ref="cryptoFieldsConfig" />
		<property name="productionModeMapping" ref="productionModeMapping" />
		<property name="cryptoServiceProviderManager" ref="cryptoProviderManager" />
		<property name="sdGenReceiver" ref="sicpaDataGeneratorRequestor" />
		<property name="storage" ref="storage" />
		<property name="lifeChecker" ref="remoteLifeChecker" />
		<property name="serverPropertiesFile" value="${profile.path}/config/server/standard-server.properties"/>
	</bean>

	<bean id="remoteLifeChecker" class="${remoteLifeChecker}" scope="prototype">
		<property name="target" ref="stdRemoteServer" />
		<property name="lifeCheckSleep" value="#{stdRemoteModel.lifeCheckSleep}" />
	</bean>


	<bean id="productionModeMapping" class="${productionModeMapping}" />

	<bean id="remoteServerSimulator" class="${remoteServerSimulator}">
		<constructor-arg ref="simulatorRemoteModel" />
		<property name="simulatorGui" ref="simulatorGui" />
		<property name="cryptoFieldsConfig" ref="cryptoFieldsConfig" />
		<property name="productionParameters" ref="productionParameters" />
		<property name="serviceProviderManager" ref="cryptoProviderManager" />
		<property name="storage" ref="storage" />
		<property name="fileSequenceStorageProvider" ref="fileSequenceStorageProvider" />
		<property name="remoteServerSimulatorOutputFolder" value="${profile.path}/simulProductSend"></property>
	</bean>

	<bean id="stdRemoteModel" class="com.sicpa.standard.client.common.utils.ConfigUtils" factory-method="load">
		<constructor-arg value="${profile.path}/config/server/remoteServer.xml" />
	</bean>

	<bean id="simulatorRemoteModel" class="com.sicpa.standard.client.common.utils.ConfigUtils" factory-method="load">
		<constructor-arg value="${profile.path}/config/server/simulator/remoteServerSimulator.xml" />
	</bean>


	<bean id="cryptoFieldsConfig" class="${cryptoFieldsConfig}" />

	<bean id="remoteServer" factory-bean="mapRemoteServerController" factory-method="get">
		<constructor-arg value="${remoteServer.behavior}" />
	</bean>

	<bean id="startupGroupAddRemote" class="com.sicpa.standard.client.common.ioc.InjectByMethodBean">
		<property name="target" ref="startupDevicesGroup" />
		<property name="methodName" value="addDevice" />
		<property name="params" ref="remoteServer" />
	</bean>

	<bean id="remoteServerProductStatusMapping" class="${remoteServerProductStatusMapping}" />

	<bean id="sicpaDataGeneratorStorage" class="${sicpaDataGeneratorStorage}">
		<property name="cryptoFieldsConfig" ref="cryptoFieldsConfig" />
		<property name="storage" ref="storage" />
		<property name="subsystemIdProvider" ref="subsystemIdProvider" />
		<property name="fileSequenceStorageProvider" ref="fileSequenceStorageProvider" />
	</bean>

	<bean id="sicpaDataGeneratorRequestor" class="${sicpaDataGeneratorRequestor}">
		<property name="incomingStorageProvider" ref="sicpaDataGeneratorStorage" />
	</bean>

	<bean id="timeoutAspect" class="${timeoutAspect}">
		<property name="timeoutSec" value="${remoteServerTimeoutCall_sec}" />
		<property name="timeoutSecLifeCheck" value="${remoteServerLifeCheckTimeoutCall_sec}" />
	</bean>

</beans>
